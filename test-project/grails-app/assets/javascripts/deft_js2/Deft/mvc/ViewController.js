// Generated by CoffeeScript 1.6.3
/*
Copyright (c) 2012-2013 [DeftJS Framework Contributors](http://deftjs.org)
Open source under the [MIT License](http://en.wikipedia.org/wiki/MIT_License).
*/

/**
A lightweight MVC view controller. Full usage instructions in the [DeftJS documentation](https://github.com/deftjs/DeftJS/wiki/ViewController).

First, specify a ViewController to attach to a view:

		Ext.define("DeftQuickStart.view.MyTabPanel", {
			extend: "Ext.tab.Panel",
			controller: "DeftQuickStart.controller.MainController",
			...
		});

Next, define the ViewController:

		Ext.define("DeftQuickStart.controller.MainController", {
			extend: "Deft.mvc.ViewController",

			init: function() {
				return this.callParent(arguments);
			}

		});

## Inject dependencies using the <u>[`inject` property](https://github.com/deftjs/DeftJS/wiki/Injecting-Dependencies)</u>:

		Ext.define("DeftQuickStart.controller.MainController", {
			extend: "Deft.mvc.ViewController",
			inject: ["companyStore"],

			config: {
				companyStore: null
			},

			init: function() {
				return this.callParent(arguments);
			}

		});

## Define <u>[references to view components](https://github.com/deftjs/DeftJS/wiki/Accessing-Views)</u> and <u>[add view listeners](https://github.com/deftjs/DeftJS/wiki/Handling-View-Events)</u> with the `control` property:

		Ext.define("DeftQuickStart.controller.MainController", {
			extend: "Deft.mvc.ViewController",

			control: {

				// Most common configuration, using an itemId and listener
				manufacturingFilter: {
					change: "onFilterChange"
				},

				// Reference only, with no listeners
				serviceIndustryFilter: true,

				// Configuration using selector, listeners, and event listener options
				salesFilter: {
					selector: "toolbar > checkbox",
					listeners: {
						change: {
							fn: "onFilterChange",
							buffer: 50,
							single: true
						}
					}
				}
			},

			init: function() {
				return this.callParent(arguments);
			}

			// Event handlers or other methods here...

		});

## Dynamically monitor view to attach listeners to added components with <u>[live selectors](https://github.com/deftjs/DeftJS/wiki/ViewController-Live-Selectors)</u>:

		control: {
			manufacturingFilter: {
				live: true,
				listeners: {
					change: "onFilterChange"
				}
			}
		};

## Observe events on injected objects with the <u>[`observe` property](https://github.com/deftjs/DeftJS/wiki/ViewController-Observe-Configuration)</u>:

		Ext.define("DeftQuickStart.controller.MainController", {
			extend: "Deft.mvc.ViewController",
			inject: ["companyStore"],

			config: {
				companyStore: null
			},

			observe: {
				// Observe companyStore for the update event
				companyStore: {
					update: "onCompanyStoreUpdateEvent"
				}
			},

			init: function() {
				return this.callParent(arguments);
			},

			onCompanyStoreUpdateEvent: function(store, model, operation, fieldNames) {
				// Do something when store fires update event
			}

		});

## Attach companion view controllers using the <u>[`companions` property](https://github.com/deftjs/DeftJS/wiki/ViewController-Companion-Configuration)</u>:

		Ext.define("DeftQuickStart.controller.MainController", {
			extend: "Deft.mvc.ViewController",
			inject: ["companyStore"],

			config: {
				companyStore: null
			},

			companions: {
				// Create companion view controllers which can also manage the original view
				// This allows a view controller to leverage common behavior provided by other view controllers.
				shoppingCart: "DeftQuickStart.controller.ShoppingCartController"
			},

			init: function() {
				return this.callParent(arguments);
			}

		});
*/

Ext.define('Deft.mvc.ViewController', {
  alternateClassName: ['Deft.ViewController'],
  mixins: ['Deft.mixin.Injectable', 'Deft.mixin.Observer'],
  requires: ['Deft.core.Class', 'Deft.log.Logger', 'Deft.mvc.ComponentSelector', 'Deft.mixin.Injectable', 'Deft.mixin.Observer', 'Deft.mvc.Observer', 'Deft.util.DeftMixinUtils', 'Deft.promise.Chain'],
  config: {
    /**
    		* View controlled by this ViewController.
    */

    view: null,
    /**
    		* @private
    		* Companion ViewController instances.
    */

    companionInstances: null
  },
  constructor: function(config) {
    if (config == null) {
      config = {};
    }
    if (Ext.isObject(config.companions)) {
      this.companions = Ext.merge(this.companions, config.companions);
      delete config.companions;
    }
    if (config.view) {
      this.controlView(config.view);
    }
    this.initConfig(config);
    this.createObservers();
    return this;
  },
  /**
  	* Initialize the ViewController
  */

  init: function() {},
  /**
  	* @protected
  */

  controlView: function(view) {
    var originalViewDestroyFunction, self;
    if (view instanceof Ext.ClassManager.get('Ext.Component')) {
      this.setView(view);
      this.registeredComponentReferences = {};
      this.registeredComponentSelectors = {};
      if (Ext.getVersion('extjs') != null) {
        if (this.getView().rendered) {
          this.onViewInitialize();
        } else {
          this.getView().on('afterrender', this.onViewInitialize, this, {
            single: true
          });
        }
        this.getView().on('beforedestroy', this.onViewBeforeDestroy, this);
      } else {
        if (this.getView().initialized) {
          this.onViewInitialize();
        } else {
          this.getView().on('initialize', this.onViewInitialize, this, {
            single: true
          });
        }
        self = this;
        originalViewDestroyFunction = this.getView().destroy;
        this.getView().destroy = function() {
          if (self.destroy()) {
            originalViewDestroyFunction.call(this);
          }
        };
      }
      this.createCompanions();
    } else {
      Ext.Error.raise({
        msg: 'Error constructing ViewController: the configured \'view\' is not an Ext.Component.'
      });
    }
  },
  /**
  	* @protected
  */

  createCompanions: function() {
    var alias, clazz, _ref, _results;
    this.companionInstances = {};
    _ref = this.companions;
    _results = [];
    for (alias in _ref) {
      clazz = _ref[alias];
      _results.push(this.addCompanion(alias, clazz));
    }
    return _results;
  },
  /**
  	* @protected
  */

  destroyCompanions: function() {
    var alias, instance, _ref, _results;
    _ref = this.companionInstances;
    _results = [];
    for (alias in _ref) {
      instance = _ref[alias];
      _results.push(this.removeCompanion(alias));
    }
    return _results;
  },
  /**
  	* Add a new companion view controller to this view controller.
  	* @param {String} alias The alias for the new companion.
  	* @param {String} class The class name of the companion view controller.
  */

  addCompanion: function(alias, clazz) {
    var error, initialClass, isRecursionStart, newHost, stackMessage;
    if ((this.companionInstances[alias] != null)) {
      Deft.Logger.warn("The specified companion alias '" + alias + "' already exists.");
      return;
    }
    isRecursionStart = false;
    if (Deft.mvc.ViewController.companionCreationStack.length === 0) {
      isRecursionStart = true;
    }
    try {
      if (!Ext.Array.contains(Deft.mvc.ViewController.companionCreationStack, Ext.getClassName(this))) {
        Deft.mvc.ViewController.companionCreationStack.push(Ext.getClassName(this));
      } else {
        Deft.mvc.ViewController.companionCreationStack.push(Ext.getClassName(this));
        initialClass = Deft.mvc.ViewController.companionCreationStack[0];
        stackMessage = Deft.mvc.ViewController.companionCreationStack.join(" -> ");
        Deft.mvc.ViewController.companionCreationStack = [];
        Ext.Error.raise({
          msg: "Error creating companions for '" + initialClass + "'. A circular dependency exists in its companions: " + stackMessage
        });
      }
      newHost = Ext.create(clazz);
      newHost.controlView(this.getView());
      this.companionInstances[alias] = newHost;
      if (isRecursionStart) {
        return Deft.mvc.ViewController.companionCreationStack = [];
      }
    } catch (_error) {
      error = _error;
      Deft.Logger.warn("Error initializing associated view controller: an error occurred while creating an instance of the specified controller: '" + clazz + "'.");
      Deft.mvc.ViewController.companionCreationStack = [];
      throw error;
    }
  },
  /**
  	* Removes and destroys a companion view controller from this view controller.
  	* @param {String} alias The alias for the companion host to remove
  */

  removeCompanion: function(alias) {
    var error, _ref;
    if (this.companionInstances[alias] == null) {
      Deft.Logger.warn("The specified companion alias '" + alias + "' cannot be removed because the alias does not exist.");
    }
    try {
      if ((_ref = this.companionInstances[alias]) != null) {
        _ref.destroy();
      }
      return delete this.companionInstances[alias];
    } catch (_error) {
      error = _error;
      Deft.Logger.warn("Error destroying associated view controller: an error occurred while destroying the associated controller with the alias '" + alias + "'.");
      throw error;
    }
  },
  /**
  	* Locates a companion view controller by alias.
  	* @param {String} alias The alias for the desired companion instance
  	* @return {Deft.mvc.ViewController} The companion view controller instance.
  */

  getCompanion: function(alias) {
    return this.companionInstances[alias];
  },
  /**
  	* Destroy the ViewController
  */

  destroy: function() {
    var id, selector;
    for (id in this.registeredComponentReferences) {
      this.removeComponentReference(id);
    }
    for (selector in this.registeredComponentSelectors) {
      this.removeComponentSelector(selector);
    }
    this.removeObservers();
    this.destroyCompanions();
    return true;
  },
  /**
  	* @private
  */

  onViewInitialize: function() {
    var config, id, listeners, live, selector, _ref;
    _ref = this.control;
    for (id in _ref) {
      config = _ref[id];
      selector = null;
      if (id !== 'view') {
        if (Ext.isString(config)) {
          selector = config;
        } else if (config.selector != null) {
          selector = config.selector;
        } else {
          selector = '#' + id;
        }
      }
      listeners = null;
      if (Ext.isObject(config.listeners)) {
        listeners = config.listeners;
      } else {
        if (!((config.selector != null) || (config.live != null))) {
          listeners = config;
        }
      }
      live = (config.live != null) && config.live;
      this.addComponentReference(id, selector, live);
      this.addComponentSelector(selector, listeners, live);
    }
    this.init();
  },
  /**
  	* @private
  */

  onViewBeforeDestroy: function() {
    if (this.destroy()) {
      this.getView().un('beforedestroy', this.onViewBeforeDestroy, this);
      return true;
    }
    return false;
  },
  /**
  	* Add a component accessor method the ViewController for the specified view-relative selector.
  */

  addComponentReference: function(id, selector, live) {
    var getterName, matches;
    if (live == null) {
      live = false;
    }
    Deft.Logger.log("Adding '" + id + "' component reference for selector: '" + selector + "'.");
    if (this.registeredComponentReferences[id] != null) {
      Ext.Error.raise({
        msg: "Error adding component reference: an existing component reference was already registered as '" + id + "'."
      });
    }
    if (id !== 'view') {
      getterName = 'get' + Ext.String.capitalize(id);
      if (this[getterName] == null) {
        if (live) {
          this[getterName] = Ext.Function.pass(this.getViewComponent, [selector], this);
        } else {
          matches = this.getViewComponent(selector);
          if (matches == null) {
            Ext.Error.raise({
              msg: "Error locating component: no component(s) found matching '" + selector + "'."
            });
          }
          this[getterName] = function() {
            return matches;
          };
        }
        this[getterName].generated = true;
      }
    }
    this.registeredComponentReferences[id] = true;
  },
  /**
  	* Remove a component accessor method the ViewController for the specified view-relative selector.
  */

  removeComponentReference: function(id) {
    var getterName;
    Deft.Logger.log("Removing '" + id + "' component reference.");
    if (this.registeredComponentReferences[id] == null) {
      Ext.Error.raise({
        msg: "Error removing component reference: no component reference is registered as '" + id + "'."
      });
    }
    if (id !== 'view') {
      getterName = 'get' + Ext.String.capitalize(id);
      if (this[getterName].generated) {
        this[getterName] = null;
      }
    }
    delete this.registeredComponentReferences[id];
  },
  /**
  	* Get the component(s) corresponding to the specified view-relative selector.
  */

  getViewComponent: function(selector) {
    var matches;
    if (selector != null) {
      matches = Ext.ComponentQuery.query(selector, this.getView());
      if (matches.length === 0) {
        return null;
      } else if (matches.length === 1) {
        return matches[0];
      } else {
        return matches;
      }
    } else {
      return this.getView();
    }
  },
  /**
  	* Add a component selector with the specified listeners for the specified view-relative selector.
  */

  addComponentSelector: function(selector, listeners, live) {
    var componentSelector, existingComponentSelector;
    if (live == null) {
      live = false;
    }
    Deft.Logger.log("Adding component selector for: '" + selector + "'.");
    existingComponentSelector = this.getComponentSelector(selector);
    if (existingComponentSelector != null) {
      Ext.Error.raise({
        msg: "Error adding component selector: an existing component selector was already registered for '" + selector + "'."
      });
    }
    componentSelector = Ext.create('Deft.mvc.ComponentSelector', {
      view: this.getView(),
      selector: selector,
      listeners: listeners,
      scope: this,
      live: live
    });
    this.registeredComponentSelectors[selector] = componentSelector;
  },
  /**
  	* Remove a component selector with the specified listeners for the specified view-relative selector.
  */

  removeComponentSelector: function(selector) {
    var existingComponentSelector;
    Deft.Logger.log("Removing component selector for '" + selector + "'.");
    existingComponentSelector = this.getComponentSelector(selector);
    if (existingComponentSelector == null) {
      Ext.Error.raise({
        msg: "Error removing component selector: no component selector registered for '" + selector + "'."
      });
    }
    existingComponentSelector.destroy();
    delete this.registeredComponentSelectors[selector];
  },
  /**
  	* Get the component selectorcorresponding to the specified view-relative selector.
  */

  getComponentSelector: function(selector) {
    return this.registeredComponentSelectors[selector];
  },
  onClassExtended: function(clazz, config) {
    clazz.override({
      constructor: Deft.mvc.ViewController.mergeSubclassInterceptor()
    });
    return true;
  },
  statics: {
    companionCreationStack: [],
    PREPROCESSING_COMPLETED_KEY: "$viewcontroller_processed",
    mergeSubclassInterceptor: function() {
      return function(config) {
        var companionPropertyName, controlPropertyName;
        if (config == null) {
          config = {};
        }
        controlPropertyName = "control";
        companionPropertyName = "companions";
        if (this[controlPropertyName] == null) {
          this[controlPropertyName] = {};
        }
        if (this[companionPropertyName] == null) {
          this[companionPropertyName] = {};
        }
        if (!this[Deft.mvc.ViewController.PREPROCESSING_COMPLETED_KEY]) {
          if (Ext.Object.getSize(this[controlPropertyName]) > 0) {
            Deft.util.DeftMixinUtils.mergeSuperclassProperty(this, controlPropertyName, Deft.mvc.ViewController.controlMergeHandler);
          }
          if (Ext.Object.getSize(this[companionPropertyName]) > 0) {
            Deft.util.DeftMixinUtils.mergeSuperclassProperty(this, companionPropertyName, Deft.mvc.ViewController.companionMergeHandler);
          }
          this[Deft.mvc.ViewController.PREPROCESSING_COMPLETED_KEY] = true;
        }
        this[Deft.util.DeftMixinUtils.parentConstructorForVersion()](arguments);
        return this;
      };
    },
    controlMergeHandler: function(originalParentControl, originalChildControl, targetClassName) {
      var childControl, mergedParentTargetConfig, originalParentTarget, originalParentTargetConfig, parentControl;
      parentControl = Ext.isObject(originalParentControl) ? Ext.clone(originalParentControl) : {};
      childControl = Ext.isObject(originalChildControl) ? Ext.clone(originalChildControl) : {};
      parentControl = Ext.merge(parentControl, childControl);
      for (originalParentTarget in originalParentControl) {
        originalParentTargetConfig = originalParentControl[originalParentTarget];
        if (parentControl[originalParentTarget] != null) {
          mergedParentTargetConfig = parentControl[originalParentTarget];
          if (Deft.mvc.ViewController.mayHaveReplacedListeners(originalParentTargetConfig, mergedParentTargetConfig)) {
            Deft.mvc.ViewController.detectReplacedListeners(mergedParentTargetConfig, originalParentTargetConfig, originalChildControl, originalParentTarget, targetClassName);
          }
        }
      }
      return parentControl;
    },
    mayHaveReplacedListeners: function(originalConfig, mergedConfig) {
      return (originalConfig.selector == null) || (mergedConfig.listeners != null);
    },
    detectReplacedListeners: function(mergedConfig, originalParentConfig, originalChildControl, controlTarget, targetClassName) {
      var errorMessage, mergedListeners, normalizedConfig, originalListeners;
      if ((mergedConfig.selector != null) && (originalChildControl[controlTarget] != null) && (originalChildControl[controlTarget].selector == null)) {
        errorMessage = "Ambiguous selector found in \`" + targetClassName + "\` while merging \`control:\` configuration for \`" + controlTarget + "\`: a superclass defines a selector of \`" + mergedConfig.selector + "\`, but the subclass defines no selector. ";
        errorMessage += "Define a selector in the subclass \`control:\` configuration for \`" + controlTarget + "\` to ensure that the correct view component is being used.";
        Deft.Logger.error(errorMessage);
        throw new Error(errorMessage);
      }
      if (Deft.mvc.ViewController.areBothConfigsComplex(mergedConfig, originalParentConfig, originalChildControl, controlTarget)) {
        mergedListeners = mergedConfig.listeners;
        originalListeners = originalParentConfig.listeners;
        Deft.mvc.ViewController.applyReplacedListeners(originalListeners, mergedListeners, function(listenerArray, eventConfig) {
          listenerArray.push(Ext.clone(eventConfig));
        });
      } else if (Deft.mvc.ViewController.hasMixedConfigs(mergedConfig, originalParentConfig)) {
        normalizedConfig = Deft.mvc.ViewController.normalizeMixedConfigs(originalParentConfig, mergedConfig);
        Deft.mvc.ViewController.applyReplacedListeners(normalizedConfig.listeners, mergedConfig.listeners, function(listenerArray, eventConfig) {
          listenerArray.push(Ext.clone(eventConfig));
        });
      } else {
        Deft.mvc.ViewController.applyReplacedListeners(originalParentConfig, mergedConfig, function(listenerArray, eventConfig) {
          listenerArray.push(Ext.clone(eventConfig));
          return Ext.Array.unique(listenerArray);
        });
      }
    },
    applyReplacedListeners: function(originalListeners, mergedListeners, applyFn) {
      var applyResult, dupeCheckListener, eventConfig, isDuplicateListener, thisEvent, _i, _len, _ref;
      for (thisEvent in originalListeners) {
        eventConfig = originalListeners[thisEvent];
        if (mergedListeners[thisEvent]) {
          if (!Ext.isArray(mergedListeners[thisEvent])) {
            mergedListeners[thisEvent] = [mergedListeners[thisEvent]];
          }
          isDuplicateListener = false;
          _ref = mergedListeners[thisEvent];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            dupeCheckListener = _ref[_i];
            if (dupeCheckListener === eventConfig || (((dupeCheckListener.fn != null) || (eventConfig.fn != null)) && dupeCheckListener.fn === eventConfig.fn)) {
              isDuplicateListener = true;
              break;
            }
          }
          if (!isDuplicateListener) {
            applyResult = applyFn(mergedListeners[thisEvent], eventConfig);
            if (applyResult != null) {
              mergedListeners[thisEvent] = applyResult;
            }
          }
        }
      }
    },
    areBothConfigsComplex: function(mergedConfig, originalParentConfig, originalChildControl, controlTarget) {
      return Ext.isObject(mergedConfig.listeners) && Ext.isObject(originalParentConfig.listeners) && ((originalChildControl[controlTarget] == null) || Ext.isObject(originalChildControl[controlTarget].listeners));
    },
    hasMixedConfigs: function(mergedConfig, originalConfig) {
      return Ext.isObject(mergedConfig.listeners) || Ext.isObject(originalConfig.listeners);
    },
    normalizeMixedConfigs: function(originalConfig, mergedConfig) {
      var matchedKey, matchedValue, normalizedConfig;
      normalizedConfig = Ext.clone(originalConfig);
      if (Ext.isObject(mergedConfig.listeners)) {
        if (!Ext.isObject(normalizedConfig.listeners)) {
          normalizedConfig.listeners = {};
        }
        for (matchedKey in mergedConfig) {
          matchedValue = mergedConfig[matchedKey];
          if (matchedKey !== "listeners") {
            normalizedConfig.listeners[matchedKey] = Ext.clone(matchedValue);
            if (mergedConfig.listeners[matchedKey] == null) {
              mergedConfig.listeners[matchedKey] = Ext.clone(matchedValue);
              delete mergedConfig[matchedKey];
            }
          }
        }
      }
      return normalizedConfig;
    },
    companionMergeHandler: function(parentCompanions, childCompanions) {
      return Ext.merge(Ext.clone(parentCompanions), Ext.clone(childCompanions));
    }
  }
});
