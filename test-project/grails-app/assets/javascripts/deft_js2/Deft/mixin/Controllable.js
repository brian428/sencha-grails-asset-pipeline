// Generated by CoffeeScript 1.6.3
/*
Copyright (c) 2012-2013 [DeftJS Framework Contributors](http://deftjs.org)
Open source under the [MIT License](http://en.wikipedia.org/wiki/MIT_License).
*/

/**
* A mixin that creates and attaches the specified view controller(s) to the target view. Used in conjunction with Deft.mvc.ViewController.
*/

Ext.define('Deft.mixin.Controllable', {
  requires: ['Ext.Component', 'Deft.core.Class', 'Deft.log.Logger', 'Deft.util.DeftMixinUtils'],
  /**
  	@private
  */

  onClassMixedIn: function(target) {
    target.override({
      constructor: Deft.mixin.Controllable.createMixinInterceptor()
    });
    target.onExtended(function(clazz, config) {
      clazz.override({
        constructor: Deft.mixin.Controllable.createMixinInterceptor()
      });
      return true;
    });
  },
  statics: {
    MIXIN_COMPLETED_KEY: "$controlled",
    PROPERTY_NAME: "controller",
    CONFIG_PROPERTY_NAME: "controllerConfig",
    CONTROLLER_GETTER_NAME: "getController",
    /**
    		* @private
    */

    createMixinInterceptor: function() {
      return function(config) {
        var configPropertyName, controller, controllerGetterName, controllerName, error, mixinCompletedKey;
        if (config == null) {
          config = {};
        }
        mixinCompletedKey = Deft.mixin.Controllable.MIXIN_COMPLETED_KEY;
        controllerName = Deft.mixin.Controllable.PROPERTY_NAME;
        configPropertyName = Deft.mixin.Controllable.CONFIG_PROPERTY_NAME;
        controllerGetterName = Deft.mixin.Controllable.CONTROLLER_GETTER_NAME;
        if (this instanceof Ext.ClassManager.get('Ext.Component') && !this[mixinCompletedKey]) {
          try {
            controller = Ext.create(config[controllerName] || this[controllerName], config[configPropertyName] || this[configPropertyName] || {});
          } catch (_error) {
            error = _error;
            Deft.Logger.warn("Error initializing view controller: an error occurred while creating an instance of the specified controller: '" + (config[controllerName] || this[controllerName]) + "'.");
            throw error;
          }
          if (this[controllerGetterName] === void 0) {
            this[controllerGetterName] = function() {
              return controller;
            };
          }
          Deft.mixin.Controllable.afterMixinProcessed(this);
          this[Deft.util.DeftMixinUtils.parentConstructorForVersion()](arguments);
          controller.controlView(this);
          return this;
        }
        return this[Deft.util.DeftMixinUtils.parentConstructorForVersion()](arguments);
      };
    },
    /**
    		* @private
    */

    afterMixinProcessed: function(target) {
      target[Deft.mixin.Controllable.MIXIN_COMPLETED_KEY] = true;
    }
  }
});
